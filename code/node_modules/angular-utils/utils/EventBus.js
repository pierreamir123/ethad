'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Event = function () {
	function Event(name) {
		_classCallCheck(this, Event);

		if (!(typeof name === 'string')) {
			throw new TypeError('Value of argument "name" violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(name));
		}

		this.name = name;
		this.subscribers = [];
		this.disable = false;
	}

	// 订阅事件, 返回清除事件的函数


	_createClass(Event, [{
		key: 'sub',
		value: function sub(fn) {
			var _this = this;
			_this.subscribers.push(fn);
			// return function () {
			// 	_this.clear(fn);
			// };
			return this;
		}
		// 发布事件，成功后返回自身

	}, {
		key: 'pub',
		value: function pub() {
			if (this.disable) return this;
			var args = [].slice.call(arguments);
			var i = 0;
			while (i < this.subscribers.length) {
				if (this.subscribers[i] === null) {
					this.subscribers.splice(i, 1);
				} else {
					this.subscribers[i].apply(null, args);
					i++;
				}
			}
			return this;
		}

		// 清除事件

	}, {
		key: 'clear',
		value: function clear(fn) {
			if (typeof fn === 'function') {
				var index = this.subscribers.indexOf(fn);
				if (index >= 0) {
					this.subscribers[index] = null;
				}
			} else {
				this.subscribers = [];
			}
			return this;
		}
	}]);

	return Event;
}();

var events = {};

exports.default = {
	events: events,
	addEvent: function addEvent(name) {
		if (!(typeof name === 'string')) {
			throw new TypeError('Value of argument "name" violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(name));
		}

		if (!events[name]) {
			events[name] = new Event(name);
		}
	},
	clear: function clear(name) {
		if (!(name == null || typeof name === 'string')) {
			throw new TypeError('Value of argument "name" violates contract.\n\nExpected:\n?string\n\nGot:\n' + _inspect(name));
		}

		if (typeof fn === 'string') {
			delete events[name];
		} else {
			events = {};
		}
	}
};

function _inspect(input, depth) {
	var maxDepth = 4;
	var maxKeys = 15;

	if (depth === undefined) {
		depth = 0;
	}

	depth += 1;

	if (input === null) {
		return 'null';
	} else if (input === undefined) {
		return 'void';
	} else if (typeof input === 'string' || typeof input === 'number' || typeof input === 'boolean') {
		return typeof input === 'undefined' ? 'undefined' : _typeof(input);
	} else if (Array.isArray(input)) {
		if (input.length > 0) {
			var _ret = function () {
				if (depth > maxDepth) return {
						v: '[...]'
					};

				var first = _inspect(input[0], depth);

				if (input.every(function (item) {
					return _inspect(item, depth) === first;
				})) {
					return {
						v: first.trim() + '[]'
					};
				} else {
					return {
						v: '[' + input.slice(0, maxKeys).map(function (item) {
							return _inspect(item, depth);
						}).join(', ') + (input.length >= maxKeys ? ', ...' : '') + ']'
					};
				}
			}();

			if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
		} else {
			return 'Array';
		}
	} else {
		var keys = Object.keys(input);

		if (!keys.length) {
			if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
				return input.constructor.name;
			} else {
				return 'Object';
			}
		}

		if (depth > maxDepth) return '{...}';
		var indent = '  '.repeat(depth - 1);
		var entries = keys.slice(0, maxKeys).map(function (key) {
			return (/^([A-Z_$][A-Z0-9_$]*)$/i.test(key) ? key : JSON.stringify(key)) + ': ' + _inspect(input[key], depth) + ';';
		}).join('\n  ' + indent);

		if (keys.length >= maxKeys) {
			entries += '\n  ' + indent + '...';
		}

		if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
			return input.constructor.name + ' {\n  ' + indent + entries + '\n' + indent + '}';
		} else {
			return '{\n  ' + indent + entries + '\n' + indent + '}';
		}
	}
}