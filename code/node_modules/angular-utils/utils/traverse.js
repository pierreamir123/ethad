'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = traverse;

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function deepTraverse(json, target) {
	var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	if (_angular2.default.isObject(json)) {
		for (var key in json) {
			if (json.hasOwnProperty(key) === true) {
				if (key === target) {
					_angular2.default.isFunction(json[key]) ? _angular2.default.noop() : json[key] = value;
				}
				deepTraverse(json[key], target, value);
			}
		}
	} else if (_angular2.default.isArray(json)) {
		for (var i = 0; i < json.length; i++) {
			var jsonObj = json[i];
			deepTraverse(jsonObj, target, value);
		}
	}
}

function traverse(json, target, value) {
	if (!(json instanceof Object || Array.isArray(json))) {
		throw new TypeError('Value of argument "json" violates contract.\n\nExpected:\nObject | Array\n\nGot:\n' + _inspect(json));
	}

	if (!(typeof target === 'number' || typeof target === 'string')) {
		throw new TypeError('Value of argument "target" violates contract.\n\nExpected:\nnumber | string\n\nGot:\n' + _inspect(target));
	}

	deepTraverse(json, target, value);
}

function _inspect(input, depth) {
	var maxDepth = 4;
	var maxKeys = 15;

	if (depth === undefined) {
		depth = 0;
	}

	depth += 1;

	if (input === null) {
		return 'null';
	} else if (input === undefined) {
		return 'void';
	} else if (typeof input === 'string' || typeof input === 'number' || typeof input === 'boolean') {
		return typeof input === 'undefined' ? 'undefined' : _typeof(input);
	} else if (Array.isArray(input)) {
		if (input.length > 0) {
			var _ret = function () {
				if (depth > maxDepth) return {
						v: '[...]'
					};

				var first = _inspect(input[0], depth);

				if (input.every(function (item) {
					return _inspect(item, depth) === first;
				})) {
					return {
						v: first.trim() + '[]'
					};
				} else {
					return {
						v: '[' + input.slice(0, maxKeys).map(function (item) {
							return _inspect(item, depth);
						}).join(', ') + (input.length >= maxKeys ? ', ...' : '') + ']'
					};
				}
			}();

			if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
		} else {
			return 'Array';
		}
	} else {
		var keys = Object.keys(input);

		if (!keys.length) {
			if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
				return input.constructor.name;
			} else {
				return 'Object';
			}
		}

		if (depth > maxDepth) return '{...}';
		var indent = '  '.repeat(depth - 1);
		var entries = keys.slice(0, maxKeys).map(function (key) {
			return (/^([A-Z_$][A-Z0-9_$]*)$/i.test(key) ? key : JSON.stringify(key)) + ': ' + _inspect(input[key], depth) + ';';
		}).join('\n  ' + indent);

		if (keys.length >= maxKeys) {
			entries += '\n  ' + indent + '...';
		}

		if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
			return input.constructor.name + ' {\n  ' + indent + entries + '\n' + indent + '}';
		} else {
			return '{\n  ' + indent + entries + '\n' + indent + '}';
		}
	}
}