'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DecoratedModule = function () {
	function DecoratedModule(name, modules) {
		_classCallCheck(this, DecoratedModule);

		if (!(typeof name === 'string')) {
			throw new TypeError('Value of argument "name" violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(name));
		}

		if (!(modules == null || Array.isArray(modules))) {
			throw new TypeError('Value of argument "modules" violates contract.\n\nExpected:\n?Array\n\nGot:\n' + _inspect(modules));
		}

		this.routers = _map2.default.get('uiRoutersConf') || {};
		this.name = name;
		this._namespace = '';

		if (modules) {
			this.ngModule = _angular2.default.module(name, modules);
		} else {
			this.ngModule = _angular2.default.module(name);
		}
	}

	_createClass(DecoratedModule, [{
		key: 'namespace',
		value: function namespace(_namespace) {
			if (!(_namespace == null || typeof _namespace === 'string')) {
				throw new TypeError('Value of argument "_namespace" violates contract.\n\nExpected:\n?string\n\nGot:\n' + _inspect(_namespace));
			}

			this._namespace = _namespace || this.name;
		}
	}, {
		key: 'assembleNamespace',
		value: function assembleNamespace(name) {
			return this._namespace + '.' + name;
		}
	}, {
		key: 'router',
		value: function router(className) {
			if (!(className == null || typeof className === 'string')) {
				throw new TypeError('Value of argument "className" violates contract.\n\nExpected:\n?string\n\nGot:\n' + _inspect(className));
			}

			var routers = this.routers;
			configRouter.$inject = ['$stateProvider'];
			function configRouter($stateProvider) {
				if (className) {
					$stateProvider.state(routers[className].state, routers[className].config);
				} else {
					Object.keys(routers).forEach(function (key) {
						$stateProvider.state(routers[key].state, routers[key].config);
					});
				}
			}
			this.ngModule.config(configRouter);
			return this;
		}
	}, {
		key: 'routerAll',
		value: function routerAll() {
			return this.router();
		}
	}, {
		key: 'config',
		value: function config(configFunc) {
			this.ngModule.config(configFunc);
			return this;
		}
	}, {
		key: 'run',
		value: function run(runFunc) {
			this.ngModule.run(runFunc);
			return this;
		}
	}, {
		key: 'controller',
		value: function controller() {
			var _ngModule;

			for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
				params[_key] = arguments[_key];
			}

			var ctrlName = params.shift();
			params.unshift(this.assembleNamespace(ctrlName));
			(_ngModule = this.ngModule).controller.apply(_ngModule, params);
			return this;
		}
	}, {
		key: 'directive',
		value: function directive() {
			var _ngModule2;

			for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				params[_key2] = arguments[_key2];
			}

			var directiveName = params.shift();
			params.unshift(this.assembleNamespace(directiveName));
			(_ngModule2 = this.ngModule).directive.apply(_ngModule2, params);
			return this;
		}
	}, {
		key: 'component',
		value: function component() {
			var _ngModule3;

			for (var _len3 = arguments.length, params = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
				params[_key3] = arguments[_key3];
			}

			var directiveName = params.shift();
			params.unshift(this.assembleNamespace(directiveName));
			(_ngModule3 = this.ngModule).component.apply(_ngModule3, params);
			return this;
		}
	}]);

	return DecoratedModule;
}();

function Module() {
	for (var _len4 = arguments.length, params = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
		params[_key4] = arguments[_key4];
	}

	var module = new (Function.prototype.bind.apply(DecoratedModule, [null].concat(params)))();
	return module;
}

exports.default = Module;

function _inspect(input, depth) {
	var maxDepth = 4;
	var maxKeys = 15;

	if (depth === undefined) {
		depth = 0;
	}

	depth += 1;

	if (input === null) {
		return 'null';
	} else if (input === undefined) {
		return 'void';
	} else if (typeof input === 'string' || typeof input === 'number' || typeof input === 'boolean') {
		return typeof input === 'undefined' ? 'undefined' : _typeof(input);
	} else if (Array.isArray(input)) {
		if (input.length > 0) {
			var _ret = function () {
				if (depth > maxDepth) return {
						v: '[...]'
					};

				var first = _inspect(input[0], depth);

				if (input.every(function (item) {
					return _inspect(item, depth) === first;
				})) {
					return {
						v: first.trim() + '[]'
					};
				} else {
					return {
						v: '[' + input.slice(0, maxKeys).map(function (item) {
							return _inspect(item, depth);
						}).join(', ') + (input.length >= maxKeys ? ', ...' : '') + ']'
					};
				}
			}();

			if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
		} else {
			return 'Array';
		}
	} else {
		var keys = Object.keys(input);

		if (!keys.length) {
			if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
				return input.constructor.name;
			} else {
				return 'Object';
			}
		}

		if (depth > maxDepth) return '{...}';
		var indent = '  '.repeat(depth - 1);
		var entries = keys.slice(0, maxKeys).map(function (key) {
			return (/^([A-Z_$][A-Z0-9_$]*)$/i.test(key) ? key : JSON.stringify(key)) + ': ' + _inspect(input[key], depth) + ';';
		}).join('\n  ' + indent);

		if (keys.length >= maxKeys) {
			entries += '\n  ' + indent + '...';
		}

		if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
			return input.constructor.name + ' {\n  ' + indent + entries + '\n' + indent + '}';
		} else {
			return '{\n  ' + indent + entries + '\n' + indent + '}';
		}
	}
}