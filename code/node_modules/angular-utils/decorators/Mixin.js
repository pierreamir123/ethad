"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var defineProperty = Object.defineProperty,
    getOwnPropertyNames = Object.getOwnPropertyNames,
    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;


function getOwnPropertyDescriptors(obj) {
	var descs = {};

	getOwnPropertyNames(obj).forEach(function (key) {
		descs[key] = getOwnPropertyDescriptor(obj, key);
	});

	return descs;
}

var Mixin = function Mixin() {
	for (var _len = arguments.length, mixins = Array(_len), _key = 0; _key < _len; _key++) {
		mixins[_key] = arguments[_key];
	}

	if (!(mixins instanceof Object)) {
		throw new TypeError("Value of argument \"mixins\" violates contract.\n\nExpected:\nObject\n\nGot:\n" + _inspect(mixins));
	}

	return function (target) {

		if (!mixins.length) {
			throw new SyntaxError("@mixin() class " + target.name + " \u81F3\u5C11\u9700\u8981\u4E00\u4E2A\u53C2\u6570.");
		}

		for (var i = 0; i < mixins.length; i++) {
			var descs = getOwnPropertyDescriptors(mixins[i]);
			var keys = getOwnPropertyNames(descs);

			for (var j = 0, k = keys.length; j < k; j++) {
				var key = keys[j];

				if (!(key in target.prototype)) {
					defineProperty(target.prototype, key, descs[key]);
				}
			}
		}
	};
};

exports.default = Mixin;

function _inspect(input, depth) {
	var maxDepth = 4;
	var maxKeys = 15;

	if (depth === undefined) {
		depth = 0;
	}

	depth += 1;

	if (input === null) {
		return 'null';
	} else if (input === undefined) {
		return 'void';
	} else if (typeof input === 'string' || typeof input === 'number' || typeof input === 'boolean') {
		return typeof input === "undefined" ? "undefined" : _typeof(input);
	} else if (Array.isArray(input)) {
		if (input.length > 0) {
			var _ret = function () {
				if (depth > maxDepth) return {
						v: '[...]'
					};

				var first = _inspect(input[0], depth);

				if (input.every(function (item) {
					return _inspect(item, depth) === first;
				})) {
					return {
						v: first.trim() + '[]'
					};
				} else {
					return {
						v: '[' + input.slice(0, maxKeys).map(function (item) {
							return _inspect(item, depth);
						}).join(', ') + (input.length >= maxKeys ? ', ...' : '') + ']'
					};
				}
			}();

			if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
		} else {
			return 'Array';
		}
	} else {
		var keys = Object.keys(input);

		if (!keys.length) {
			if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
				return input.constructor.name;
			} else {
				return 'Object';
			}
		}

		if (depth > maxDepth) return '{...}';
		var indent = '  '.repeat(depth - 1);
		var entries = keys.slice(0, maxKeys).map(function (key) {
			return (/^([A-Z_$][A-Z0-9_$]*)$/i.test(key) ? key : JSON.stringify(key)) + ': ' + _inspect(input[key], depth) + ';';
		}).join('\n  ' + indent);

		if (keys.length >= maxKeys) {
			entries += '\n  ' + indent + '...';
		}

		if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
			return input.constructor.name + ' {\n  ' + indent + entries + '\n' + indent + '}';
		} else {
			return '{\n  ' + indent + entries + '\n' + indent + '}';
		}
	}
}