'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getMoudlePrefix = exports.setModulePrefix = undefined;
exports.default = Component;

var _angular = require('angular');

var _angular2 = _interopRequireDefault(_angular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /*
                                                                                                                                                                                                                              * Created on Wed Oct 17 2018
                                                                                                                                                                                                                              *
                                                                                                                                                                                                                              * Copyright (c) 2018 Your Company
                                                                                                                                                                                                                              */

var prefix = null;
/**
 * 全局注册组件
 * @param {*} config { name, ...componentOpts }
 */
function withComponent(config) {
	var name = config.name,
	    componentOpts = _objectWithoutProperties(config, ['name']);

	// 验证name的值为驼峰形式, 连字符的形式命名会引发无法渲染的问题


	if (!/^[a-z|A-Z]+$/.test(name)) {
		console.warn('组件名称不符合驼峰形式，可能引起渲染异常！');
	}

	return _angular2.default.module(prefix || '__components__.' + name, []).component(name, componentOpts);
}

// 设置模块名称前缀
function setModulePrefix(_prefix) {
	prefix = _prefix;
}

function getMoudlePrefix() {
	return prefix;
}

function Component(config) {
	return function (target) {
		config.controller = target;
		withComponent(config);
	};
}

exports.setModulePrefix = setModulePrefix;
exports.getMoudlePrefix = getMoudlePrefix;